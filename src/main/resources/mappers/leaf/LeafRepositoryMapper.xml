<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Recorders.ggogit.domain.leaf.repository.LeafRepository">

        <insert id="save" parameterType="Leaf"
                useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
            INSERT INTO LEAF (TREE_ID, PARENT_LEAF_ID, VISIBILITY, TITLE, CONTENT)
            <if test="parentLeafId != null">
                VALUES (#{treeId}, #{parentLeafId}, #{visibility}, #{title}, #{content})
            </if>
            <if test="parentLeafId == null">
                VALUES (#{treeId}, NULL, #{visibility}, #{title}, #{content})
            </if>
        </insert>

        <update id="update" parameterType="Leaf">
            UPDATE LEAF SET
                TITLE = #{title},
                CONTENT = #{content},
                VISIBILITY = #{visibility},
                VIEW_COUNT = #{viewCount},
                LIKE_COUNT = #{likeCount},
                CHILD_LEAF_COUNT = #{childLeafCount},
                BOOK_MARK = #{bookMark}
            WHERE ID = 1;
        </update>

        <delete id="delete" parameterType="int">
            DELETE FROM LEAF
            WHERE ID = #{id}
        </delete>

        <select id="existsById" parameterType="Long" resultType="Boolean">
            SELECT COUNT(*) FROM LEAF
            WHERE ID = #{id}
        </select>

        <select id="findById" resultType="Leaf">
            SELECT * FROM LEAF
            WHERE ID = #{id}
        </select>

        <select id="findAll" resultType="Leaf">
            SELECT * FROM LEAF
        </select>

        <select id="findByTreeIdOrderByCreateTimeDesc" resultType="Leaf">
            SELECT * FROM LEAF
            WHERE TREE_ID = #{treeId}
            ORDER BY CREATE_TIME
        </select>
    
        <select id="findLeafCardViewByBookId" resultType="LeafCardView">
            SELECT
                L2.TREE_ID,
                L2.LEAF_ID,
                L2.TITLE,
                L2.CONTENT,
                L2.VIEW_COUNT,
                M2.USER_NICKNAME,
                M2.USER_EMAIL_ID,
                NVL(LK2.LIKE_ACTIVATE, 0) AS LIKE_ACTIVATE,
                L2.UPDATE_TIME
            FROM (
                SELECT
                    L.ID AS LEAF_ID,
                    L.TREE_ID,
                    L.TITLE,
                    L.CONTENT,
                    L.VIEW_COUNT,
                    L.UPDATE_TIME
                FROM LEAF L
                WHERE TREE_ID IN (
                    SELECT T1.ID
                    FROM TREE T1
                    WHERE BOOK_ID = #{bookId}
                )
            ) L2
            LEFT JOIN (
                SELECT T.ID AS TREE_ID,
                T.MEMBER_ID
                FROM TREE T
            ) T2
            ON T2.TREE_ID = L2.TREE_ID
            LEFT JOIN (
                SELECT M.ID AS MEMBER_ID,
                M.NICKNAME AS USER_NICKNAME,
                SUBSTR(M.EMAIL, 1, INSTR(EMAIL, '@') - 1) AS USER_EMAIL_ID
                FROM MEMBER M
            ) M2
            ON T2.MEMBER_ID = M2.MEMBER_ID
            LEFT JOIN (
                SELECT  LK.LEAF_ID,
                LK.ACTIVATE AS LIKE_ACTIVATE
                FROM LEAF_LIKE LK
                WHERE MEMBER_ID = #{memberId}
            ) LK2
            ON L2.LEAF_ID = LK2.LEAF_ID;
        </select>

</mapper>