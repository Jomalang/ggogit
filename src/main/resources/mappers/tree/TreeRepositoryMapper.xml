<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Recorders.ggogit.domain.tree.repository.TreeRepository">
<!--트리 생성-->
    <insert id="save" parameterType="Tree"
            useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
        INSERT INTO TREE (MEMBER_ID, SEED_ID, TITLE, DESCRIPTION, BOOK_MARK_COUNT, VISIBILITY, BOOK_ID)
        VALUES(#{memberId}, #{seedId}, #{title}, #{description}, #{bookMarkCount}, #{visibility}, #{bookId})
    </insert>

    <insert id="saveEtc" parameterType="Tree"
            useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
        INSERT INTO TREE (MEMBER_ID, SEED_ID, TITLE, DESCRIPTION, BOOK_MARK_COUNT, VISIBILITY)
        VALUES(#{memberId}, #{seedId}, #{title}, #{description}, #{bookMarkCount}, #{visibility})
    </insert>

    <!--트리 조회 아이디로 조회-->
    <select id="findById" parameterType="Long" resultType="Tree">
        SELECT * FROM TREE WHERE ID = #{id}
    </select>
    <!--트리 리스트 전체 조회-->
    <select id="findListAll" parameterType="Tree">
        SELECT * FROM TREE ORDER BY TREE.UPDATE_TIME
    </select>
    <!--트리 ID별 조회-->
    <select id="findByTreeId" parameterType="Tree">
        SELECT * FROM TREE WHERE ID=#{id}
    </select>
    <!--트리 ID별 조회-->
    <select id="hasTreeNumById" resultType="Long" >
        SELECT COUNT(ID) FROM TREE WHERE ID=#{id} GROUP BY ID
    </select>
    <!--회원 ID별 조회-->
    <select id="findByMemberId">
        SELECT * FROM TREE
        <where>
            MEMBER_ID=#{memberId}
        </where>
    </select>
    <!--시드 ID, 회원 ID별 조회-->
    <select id="findByMemberIdAndSeeedId">
        SELECT * FROM TREE
        <where>
            MEMBER_ID=#{memberId}
                 <if test="seedId != 0">
                     AND SEED_ID=#{seedId}
                 </if>

        </where>
    </select>
    <!--회원 ID별 트리 count조회-->
    <select id="getTreeCountByMemberId" parameterType="Long">
        SELECT count(ID) FROM TREE WHERE MEMBER_ID=#{memberId}
    </select>
    <!--제목 별 조회-->
    <select id="findByTitle" parameterType="Tree">
        SELECT * FROM TREE WHERE TITLE LIKE #{title}
    </select>
    <!--설명글 별 조회-->
    <select id="findByDescription" parameterType="Tree">
        SELECT * FROM TREE WHERE DESCRIPTION LIKE #{description}
    </select>
    <!--공개성 별 조회-->
    <select id="findByVisibility" parameterType="Tree">
        SELECT * FROM TREE WHERE VISIBILITY = #{visibility}
    </select>
    <!--일치하는 트리 ID 회원 ID 조회-->
    <select id="findMemberIdById" parameterType="Tree">
        SELECT TREE.MEMBER_ID FROM TREE WHERE ID = #{id}
    </select>
    <!--일치하는 트리 ID 제목 조회-->
    <select id="findTitleById" parameterType="Tree">
        SELECT TREE.TITLE FROM TREE WHERE ID = #{id}
    </select>
    <!--일치하는 트리 ID 설명글 조회-->
    <select id="findDescriptionById" parameterType="Tree">
        SELECT TREE.DESCRIPTION FROM TREE WHERE ID = #{id}
    </select>
    <!--일치하는 트리 ID 공개성 조회-->
    <select id="findVisibilityById" parameterType="Tree">
        SELECT TREE.VISIBILITY FROM TREE WHERE ID = #{id}
    </select>
    <!--트리 ID readPage 조회-->
    <select id="findReadPageById">
        SELECT IFNULL(READING_PAGE,0) AS READING_PAGE
        FROM TREE_BOOK WHERE TREE_ID = #{id}
    </select>
    <!--트리 ID 이미지 조회-->
    <select id="findTreeImageById">
        SELECT NAME FROM TREE_IMAGE WHERE TREE_ID = #{id}
    </select>

    <!--Member ID 별 도서 트리 리스트 조회-->
    <select id="getTreeInfoBookView" resultType="TreeInfoView">
        SELECT
        B.ID AS BOOK_ID,
        BC.NAME AS BOOK_CATEGORY,
        B.TITLE AS BOOK_TITLE,
        B.AUTHOR AS BOOK_AUTHOR,
        B.PUBLISHER AS BOOK_PUBLISHER,
        DATE_FORMAT(B.PUBLISH_DATE, '%Y') AS BOOK_PUBLISHED_YEAR,
        B.TOTAL_PAGE AS BOOK_TOTAL_PAGE,
        COALESCE(B.IMAGE_FILE, TI.NAME) AS COVER_IMAGE_NAME,
        T.ID AS TREE_ID,
        T.MEMBER_ID AS MEMBER_ID,
        T.SEED_ID AS SEED_ID,
        T.TITLE AS TITLE,
        T.DESCRIPTION AS DESCRIPTION,
        T.VISIBILITY AS VISIBILITY,
        DATE_FORMAT(T.CREATE_TIME, '%Y-%m-%d %H:%i:%s') AS CREATED_AT,
        DATE_FORMAT(LT.CREATE_TIME, '%Y-%m-%d %H:%i:%s') AS LEAF_CREATED_AT,
        IFNULL(TB.READING_PAGE, 0) AS READING_PAGE,
        IFNULL(LC.LEAF_CNT, 0) AS TREE_LEAF_CNT,
        IFNULL(TL.LIKE_CNT, 0) AS TREE_LIKE_CNT,
        IFNULL(LV.LEAF_VIEW, 0) AS TREE_VIEW_CNT
        FROM TREE T
        LEFT JOIN TREE_BOOK TB ON T.ID = TB.TREE_ID
        LEFT JOIN BOOK B ON T.BOOK_ID = B.ID
        LEFT JOIN (SELECT NAME, TREE_ID FROM TREE_IMAGE) TI ON TI.TREE_ID = T.ID
        LEFT JOIN BOOK_CATEGORY BC ON B.BOOK_CATEGORY_ID = BC.ID
        LEFT JOIN (SELECT TREE_ID, COUNT(MEMBER_ID) AS LIKE_CNT FROM TREE_LIKE GROUP BY TREE_ID) TL ON TL.TREE_ID = T.ID
        LEFT JOIN (SELECT TREE_ID, COUNT(ID) AS LEAF_CNT FROM LEAF GROUP BY TREE_ID) LC ON LC.TREE_ID = T.ID
        LEFT JOIN (SELECT TREE_ID, SUM(VIEW_COUNT) AS LEAF_VIEW FROM LEAF GROUP BY TREE_ID) LV ON LV.TREE_ID = T.ID
        LEFT JOIN (SELECT TREE_ID, CREATE_TIME FROM LEAF ORDER BY CREATE_TIME DESC FETCH FIRST 1 ROW ONLY) LT ON LT.TREE_ID = T.ID
        <where>
            T.MEMBER_ID = #{memberId}
            <if test="seedId != null">
                AND T.SEED_ID = #{seedId}
            </if>
        </where>
    </select>
    <!--Member ID 별 도서 트리 리스트 조회-->
    <select id="getTreeInfoViewByTreeId" resultType="TreeInfoView">
        SELECT
            B.ID AS BOOK_ID,
            BC.NAME AS BOOK_CATEGORY,
            B.TITLE AS BOOK_TITLE,
            B.AUTHOR AS BOOK_AUTHOR,
            B.PUBLISHER AS BOOK_PUBLISHER,
            DATE_FORMAT(B.PUBLISH_DATE, '%Y') AS BOOK_PUBLISHED_YEAR,
            B.TOTAL_PAGE AS BOOK_TOTAL_PAGE,
            T.ID AS TREE_ID,
            T.MEMBER_ID AS MEMBER_ID,
            T.SEED_ID AS SEED_ID,
            T.TITLE AS TITLE,
            T.DESCRIPTION AS DESCRIPTION,
            T.VISIBILITY AS VISIBILITY,
            DATE_FORMAT(T.CREATE_TIME, '%Y-%m-%d %H:%i:%s') AS CREATED_AT,
            DATE_FORMAT(LT.CREATE_TIME, '%Y-%m-%d %H:%i:%s') AS LEAF_CREATED_AT,
            IFNULL(TB.READING_PAGE, 0) AS READING_PAGE,
            COALESCE(B.IMAGE_FILE, TI.NAME) AS COVER_IMAGE_NAME,
            IFNULL(LC.LEAF_CNT, 0) AS TREE_LEAF_CNT,
            IFNULL(TL.LIKE_CNT, 0) AS TREE_LIKE_CNT,
            IFNULL(LV.LEAF_VIEW, 0) AS TREE_VIEW_CNT
        FROM TREE T
                 LEFT JOIN TREE_BOOK TB ON T.ID = TB.TREE_ID
                 LEFT JOIN BOOK B ON T.BOOK_ID = B.ID
                 LEFT JOIN TREE_IMAGE TI ON TI.TREE_ID = T.ID
                 LEFT JOIN BOOK_CATEGORY BC ON B.BOOK_CATEGORY_ID = BC.ID
                 LEFT JOIN (
            SELECT TREE_ID, COUNT(MEMBER_ID) AS LIKE_CNT
            FROM TREE_LIKE
            GROUP BY TREE_ID
        ) TL ON TL.TREE_ID = T.ID
                 LEFT JOIN (
            SELECT TREE_ID, COUNT(ID) AS LEAF_CNT
            FROM LEAF
            GROUP BY TREE_ID
        ) LC ON LC.TREE_ID = T.ID
                 LEFT JOIN (
            SELECT TREE_ID, SUM(VIEW_COUNT) AS LEAF_VIEW
            FROM LEAF
            GROUP BY TREE_ID
        ) LV ON LV.TREE_ID = T.ID
                 LEFT JOIN (
            SELECT TREE_ID, CREATE_TIME
            FROM LEAF
            WHERE (TREE_ID, CREATE_TIME) IN (
                SELECT TREE_ID, MAX(CREATE_TIME)
                FROM LEAF
                GROUP BY TREE_ID
            )
        ) LT ON LT.TREE_ID = T.ID
        WHERE T.ID = #{treeId}
    </select>


    <!--트리 제목 수정-->
    <update id="updateTitleById" parameterType="Tree">
        UPDATE TREE SET TITLE = #{title}
        WHERE ID = #{id}
    </update>
    <!--트리 설명문 수정-->
    <update id="updateDescriptionById" parameterType="Tree">
        UPDATE TREE SET DESCRIPTION = #{description}
        WHERE ID = #{id}
    </update>
    <!--트리 공개성 수정-->
    <update id="updateVisibilityById" parameterType="Tree">
        UPDATE TREE SET VISIBILITY = #{visibility}
        WHERE ID = #{id}
    </update>

    <delete id="delete" parameterType="Tree">
        DELETE FROM TREE WHERE ID = #{id}
    </delete>
</mapper>